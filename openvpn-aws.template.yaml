---
AWSTemplateFormatVersion: "2010-09-09"
Description: OpenVPN server (Own VPC)

# ToDo:
# - Using LetsEncrypt
#   - https://www.mkwserver.info/index.php?/topic/9-using-let%C3%A2%E2%82%AC%E2%84%A2s-encrypt-and-certbot-to-automate-the-creation-of-certificates-for-openvpn/&tab=comments#comment-9
#   - https://github.com/hashicorp/best-practices/blob/master/terraform/modules/aws/network/openvpn/openvpn.tf
# - Handle different tiers of users + how to set up OpenVPN with commands in userdata
#   - https://github.com/Accenture/adop-aws/blob/master/layer4-openvpn/service-openvpn-access-server.yaml

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "AWS Configuration"
        Parameters:
          - InstanceType
          - KeyName
          - HostedZoneName
      - Label:
          default: "OpenVPN Configuration"
        Parameters:
          - AdminUser
          - AdminPassword
          - RouteAllTraffic
          - UseVPNDNS

Parameters:
  InstanceType:
    Description: OpenVPN Instance Type
    Type: String
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
    Default: t3.micro

  KeyName:
    Description: "SSH Key Name"
    Type: AWS::EC2::KeyPair::KeyName

  HostedZoneName:
    Description: '[Optional] Create a record like "openvpn.eu-west-1." for your Hosted Zone'
    Type: String
    MinLength: 4
    MaxLength: 255

  AdminUser:
    Description: OpenVPN Admin User
    Type: String
    MinLength: 4
    MaxLength: 32
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: Must begin with a letter, be at least 4 chars long and only alphanumeric
    Default: openvpn

  AdminPassword:
    Description: OpenVPN Admin Password
    Type: String
    NoEcho: true
    MinLength: 8
    MaxLength: 32
    ConstraintDescription: Must be at least 8 chars long

  RouteAllTraffic:
    Description: Should all local traffic go over VPN when connected?
    Type: Number
    AllowedValues:
      - 0
      - 1
    Default: 1

  UseVPNDNS:
    Description: Should client use VPN supplied DNS when connected?
    Type: Number
    AllowedValues:
      - 0
      - 1
    Default: 1

  SplitTunnel:
    Description: |
      True if the OpenVPN is a split tunnel, else false. A VPN is considered to be a split tunnel if it only routes private traffic over the tunnel and not the traffic destined for the default gateway.
    Default: false
    Type: String
    AllowedValues:
      - true
      - false

Conditions:
  HasHostedZone: !Not [!Equals [!Ref HostedZoneName, ""]]

Mappings:
  AWSRegionArch2AMI:
    # Software Version: OpenVPN Access Server 2.7.5-fe8020db-5343-4c43-9e65-5ed4a825c931-ami-0c56f53c16ad84dcd.4
    ap-south-1:
      HVM64: ami-00b7bb451c0c20931
    eu-west-3:
      HVM64: ami-046a4e41b1e9b05de
    eu-west-2:
      HVM64: ami-0d8328d4870bdb740
    eu-west-1:
      HVM64: ami-0cb4952aadb21a730
    ap-northeast-2:
      HVM64: ami-0ee35e6d85611600d
    ap-northeast-1:
      HVM64: ami-0fb7d2efacd90133b
    sa-east-1:
      HVM64: ami-01ed0cb648aab86b9
    ca-central-1:
      HVM64: ami-027ea0cc4e34dbf65
    ap-southeast-1:
      HVM64: ami-086b2468bd6cf03ae
    ap-southeast-2:
      HVM64: ami-0d8ba0e9e6b6d18b7
    eu-central-1:
      HVM64: ami-01a95ada398994de8
    us-east-1:
      HVM64: ami-0ca1c6f31c3fb1708
    us-east-2:
      HVM64: ami-06b7ca1fe6197b6ff
    us-west-1:
      HVM64: ami-0f2426a96b5ca8a0c
    us-west-2:
      HVM64: ami-034692da3c6768a18

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      Tags:
        - Key: Name
          Value: OpenVPN

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.0.0/24"
      Tags:
        - Key: Name
          Value: OpenVPN Public Subnet

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  IPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: "vpc"
      InstanceId: !Ref OpenVPNInstance

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security group for OpenVPN Server
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 943
          ToPort: 943
          CidrIp: "0.0.0.0/0"
        - IpProtocol: udp
          FromPort: 1194
          ToPort: 1194
          CidrIp: "0.0.0.0/0"

  OpenVPNInstance:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Configure OpenVPN
      AWS::CloudFormation::Init:
        configSets:
          default:
            - install_cfn
            # - config_ip_forwarding
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |+
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.OpenVPNInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v \
                    --stack ${AWS::StackName} \
                    --resource OpenVPNInstance \
                    --region ${AWS::Region}
                runas=root
            /lib/systemd/system/cfn-hup.service:
              content: |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/usr/local/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
          commands:
            start_enable_cfn-hup:
              command: "systemctl enable cfn-hup && systemctl start cfn-hup"
        # config_ip_forwarding:
        #   commands:
        #     edit_config_file:
        #       command: 'echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf'
        #       test: '! grep "net.ipv4.ip_forward" /etc/sysctl.conf'
        #     update_system:
        #       command: "sysctl -p"
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT15M"
    Properties:
      ImageId:
        Fn::FindInMap:
          - AWSRegionArch2AMI
          - Ref: AWS::Region
          - HVM64
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - DeviceIndex: "0"
          AssociatePublicIpAddress: true
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: OpenVPN Instance
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |+
              #!/bin/bash -xe

              # public_hostname=${PublicHostname}
              # admin_user=${AdminUser}
              # admin_pw=${AdminPassword}
              # reroute_gw=${RouteAllTraffic}
              # reroute_dns=${UseVPNDNS}

              apt update -y
              apt install -y python-pip
              pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz

              /usr/local/bin/cfn-init -v \
              --configsets default \
              --stack ${AWS::StackName} \
              --resource OpenVPNInstance \
              --region ${AWS::Region}

              is_hup_active=$(systemctl is-active cfn-hup)

              [[ ${!is_hup_active} == "active" ]]

              /usr/local/bin/cfn-signal -e $? \
              --stack ${AWS::StackName} \
              --resource OpenVPNInstance \
              --region ${AWS::Region}
            - PublicHostname: !Sub "openvpn.${AWS::Region}.${HostedZoneName}"

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: HasHostedZone
    Properties:
      HostedZoneName: !Ref "HostedZoneName"
      Comment: Friendly DNS name for OpenVPN server
      Name: !Sub "openvpn.${AWS::Region}.${HostedZoneName}"
      Type: A
      TTL: 300
      ResourceRecords:
        - !Ref IPAddress

Outputs:
  OpenVPNServerAdminURL:
    Description: OpenVPN Administration URL
    Value: !Sub https://${DNSRecord}:943/admin
  OpenVPNServerURL:
    Description: OpenVPN User Login URL
    Value: !Sub https://${DNSRecord}/
