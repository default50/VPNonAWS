---
AWSTemplateFormatVersion: "2010-09-09"
Description: WireGuard server

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "AWS Configuration"
        Parameters:
          - InstanceType
          - KeyName
          - HostedZoneName
          - LatestAmiId
          - CIDRBlock
          - PublicSubnetCIDR
      - Label:
          default: "WireGuard Configuration"
        Parameters:
          - ServerIP
          - ServerPort
          - PrivateKey
          - PreSharedKey
          - Peer1PublicKey
          - Peer1IP
          - Peer2PublicKey
          - Peer2IP

Parameters:
  InstanceType:
    Description: EC2 Instance Type
    Type: String
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - c5d.large
      - c5d.xlarge
      - c5d.2xlarge
      - c5d.4xlarge
      - c5d.9xlarge
      - c5d.18xlarge
      - c5n.large
      - c5n.xlarge
      - c5n.2xlarge
      - c5n.4xlarge
      - c5n.9xlarge
      - c5n.18xlarge
    Default: t3.medium

  KeyName:
    Description: 'SSH Key Name'
    Type: AWS::EC2::KeyPair::KeyName

  HostedZoneName:
    Description: '[Optional] Create a record like "wireguard.eu-west-1." for your Hosted Zone'
    Type: String
    MinLength: 4
    MaxLength: 255

  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  CIDRBlock:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.0.0/16
    Description: VPC CIDR Block (eg 10.0.0.0/16)
    Type: String

  PublicSubnetCIDR:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.0.0/24
    Description: VPC CIDR Block for a public subnet (eg 10.0.0.0/24)
    Type: String

  ServerIP:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.200.200.1/24
    Description: IP and netmask of WireGuard server (eg 10.200.200.1/24)
    ConstraintDescription: Must be an IP inside the PublicSubnetCIDR range
    Type: String

  ServerPort:
    Description: WireGuard UDP listening port
    Type: Number
    MinValue: 1025
    MaxValue: 65535
    ConstraintDescription: Must be a number between 1025 and 65535
    Default: 51280

  PrivateKey:
    Description: WireGuard server Private Key
    Type: String
    NoEcho: true

  PreSharedKey:
    Description: WireGuard server Pre Shared Key
    Type: String
    NoEcho: true

  Peer1PublicKey:
    Description: Public Key for peer 1
    Type: String

  Peer1IP:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.200.200.2/32
    Description: IP and netmask of allowed WireGuard peer (eg 10.200.200.2/32)
    ConstraintDescription: Must be an IP inside the ServerIP range
    Type: String

  Peer2PublicKey:
    Description: Public Key for peer 1
    Type: String
    Default: Invalid

  Peer2IP:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.200.200.3/32
    Description: IP and netmask of allowed WireGuard peer (eg 10.200.200.2/32)
    ConstraintDescription: Must be an IP inside the ServerIP range
    Type: String

Conditions:
  HasHostedZone: !Not [ !Equals [ !Ref HostedZoneName, "" ]]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CIDRBlock
      Tags:
      - Key: Name
        Value: WireGuard VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR
      Tags:
      - Key: Name
        Value: WireGuard Public Subnet

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  IPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: "vpc"

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security group for WireGuard Server
      SecurityGroupIngress:
      - IpProtocol: udp
        FromPort: !Ref ServerPort
        ToPort: !Ref ServerPort
        CidrIp: "0.0.0.0/0"
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: "0.0.0.0/0"

  VPNInstance:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Install a simple application
      AWS::CloudFormation::Init:
        configSets:
          default:
            - install_cfn
            - config_repos
            - config_ip_forwarding
            - install_wireguard
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |+
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.VPNInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v \
                    --stack ${AWS::StackName} \
                    --resource VPNInstance \
                    --region ${AWS::Region}
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        config_repos:
            files:
              /etc/yum.repos.d/wireguard.repo:
                source: https://copr.fedorainfracloud.org/coprs/jdoss/wireguard/repo/epel-7/jdoss-wireguard-epel-7.repo
                owner: root
                group: root
            commands:
                enable_epel:
                  command: "amazon-linux-extras install epel"
                  test: 'amazon-linux-extras list | grep epel | (! grep enabled)'
        config_ip_forwarding:
          commands:
            edit_config_file:
              command: 'echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf'
              test: '! grep "net.ipv4.ip_forward" /etc/sysctl.conf'
            update_system:
              command: 'sysctl -p'
        install_wireguard:
          packages:
            yum:
              wireguard-dkms: []
              wireguard-tools: []
          files:
            /etc/wireguard/wg0.conf:
              content: !Sub |
                [Interface]
                Address = ${ServerIP}
                # We don't want WG mangling this file, only CFN
                SaveConfig = false
                ListenPort = ${ServerPort}
                PrivateKey = ${PrivateKey}

                # Note - substitute eth0 in the following lines to match the Internet-facing interface
                PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
                PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE

                [Peer]
                PublicKey = ${Peer1PublicKey}
                PresharedKey = ${PreSharedKey}
                AllowedIPs = ${Peer1IP}

                [Peer]
                PublicKey = ${Peer2PublicKey}
                PresharedKey = ${PreSharedKey}
                AllowedIPs = ${Peer2IP}
              mode: '000400'
              owner: root
              group: root
          commands:
            enable_wireguard:
              command: 'systemctl enable wg-quick@wg0'
            start_wireguard:
              command: 'systemctl start wg-quick@wg0'
          services:
            sysvinit:
              wg-quick@wg0:
                files:
                  - '/etc/wireguard/wg0.conf'
                packages:
                  yum:
                    - wireguard-dkms
                    - wireguard-tools
    DependsOn: IPAddress
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref SecurityGroup
          SubnetId:
            !Ref PublicSubnet
      Tags:
       - Key: Name
         Value: WireGuard VPN Instance
      UserData:
        Fn::Base64: !Sub |+
            #!/bin/bash -xe
            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v \
              --stack ${AWS::StackName} \
              --resource VPNInstance \
              --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? \
              --stack ${AWS::StackName} \
              --resource VPNInstance \
              --region ${AWS::Region}

  IPAssociaton:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt IPAddress.AllocationId
      InstanceId: !Ref VPNInstance

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: HasHostedZone
    Properties:
      HostedZoneName: !Ref 'HostedZoneName'
      Comment: Friendly DNS name for WireGuard server
      Name: !Join ['', ['wireguard', ., !Ref 'AWS::Region', ., !Ref 'HostedZoneName']]
      Type: A
      TTL: '900'
      ResourceRecords:
      - !Ref IPAddress

Outputs:
  VPNServerURL:
    Description: WireGuard VPN Server URL
    Value: !Sub ${IPAddress}:51280
  VPNServerDNSName:
    Description: WireGuard VPN Server DNS Name
    Value: !Sub ${DNSRecord}
