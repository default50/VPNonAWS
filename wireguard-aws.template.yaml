---
AWSTemplateFormatVersion: "2010-09-09"
Description: WireGuard VPN server

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "AWS Configuration"
        Parameters:
          - InstanceType
          - KeyName
          - HostedZoneName
          - LatestAmiId
          - CIDRBlock
          - PublicSubnetCIDR
      - Label:
          default: "WireGuard Configuration"
        Parameters:
          - VPNSubnet
          - ServerIP
          - ServerPort
          - PrivateKey
          - PreSharedKey
          - Peer1Name
          - Peer1PublicKey
          - Peer1IP
          - Peer2Name
          - Peer2PublicKey
          - Peer2IP
          - Peer3Name
          - Peer3PublicKey
          - Peer3IP
          - Peer4Name
          - Peer4PublicKey
          - Peer4IP
          - Peer5Name
          - Peer5PublicKey
          - Peer5IP
          - Peer6Name
          - Peer6PublicKey
          - Peer6IP
  cfn-lint:
    config:
      ignore_checks:
        # https://github.com/aws-cloudformation/cfn-lint/blob/main/src/cfnlint/rules/resources/NoEcho.py
        - W4002

Parameters:
  InstanceType:
    Description: EC2 Instance Type
    Type: String
    Default: c6g.medium

  KeyName:
    Description: "SSH Key Name"
    Type: AWS::EC2::KeyPair::KeyName

  HostedZoneName:
    Description: '[Optional] Create a record like "wireguard.eu-west-1." for your Hosted Zone'
    Type: String
    MinLength: 4
    MaxLength: 255

  LatestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2022-ami-kernel-default-arm64"

  CIDRBlock:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.0.0/16
    Description: VPC CIDR Block (eg 10.0.0.0/16)
    Type: String

  PublicSubnetCIDR:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.0.0/24
    Description: VPC CIDR Block for a public subnet (eg 10.0.0.0/24)
    Type: String

  VPNSubnet:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.200.200.0/24
    Description: VPC CIDR Block for a public subnet (eg 10.0.0.0/24)
    Type: String

  ServerIP:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.200.200.254/24
    Description: IP and netmask of WireGuard server (eg 10.200.200.1/24)
    ConstraintDescription: Must be an IP inside the VPNSubnet range
    Type: String

  ServerPort:
    Description: WireGuard UDP listening port
    Type: Number
    MinValue: 1025
    MaxValue: 65535
    ConstraintDescription: Must be a number between 1025 and 65535
    Default: 51280

  PrivateKey:
    Description: WireGuard server Private Key
    Type: String
    NoEcho: true

  PreSharedKey:
    Description: WireGuard server Pre Shared Key
    Type: String
    NoEcho: true

  Peer1Name:
    Description: Friendly name of peer 1
    Default: Peer1
    Type: String

  Peer1PublicKey:
    Description: Public Key for peer 1
    Type: String

  Peer1IP:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.200.200.1/32
    Description: IP and netmask of allowed WireGuard peer (eg 10.200.200.2/32)
    ConstraintDescription: Must be an IP inside the ServerIP range
    Type: String

  Peer2Name:
    Description: Friendly name of peer 2
    Default: Peer2
    Type: String

  Peer2PublicKey:
    Description: Public Key for peer 2
    Type: String
    Default: ""

  Peer2IP:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.200.200.2/32
    Description: IP and netmask of allowed WireGuard peer (eg 10.200.200.2/32)
    ConstraintDescription: Must be an IP inside the ServerIP range
    Type: String

  Peer3Name:
    Description: Friendly name of peer 3
    Default: Peer3
    Type: String

  Peer3PublicKey:
    Description: Public Key for peer 3
    Type: String
    Default: ""

  Peer3IP:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.200.200.3/32
    Description: IP and netmask of allowed WireGuard peer (eg 10.200.200.2/32)
    ConstraintDescription: Must be an IP inside the ServerIP range
    Type: String

  Peer4Name:
    Description: Friendly name of peer 4
    Default: Peer4
    Type: String

  Peer4PublicKey:
    Description: Public Key for peer 4
    Type: String
    Default: ""

  Peer4IP:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.200.200.4/32
    Description: IP and netmask of allowed WireGuard peer (eg 10.200.200.2/32)
    ConstraintDescription: Must be an IP inside the ServerIP range
    Type: String

  Peer5Name:
    Description: Friendly name of peer 5
    Default: Peer5
    Type: String

  Peer5PublicKey:
    Description: Public Key for peer 5
    Type: String
    Default: ""

  Peer5IP:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.200.200.5/32
    Description: IP and netmask of allowed WireGuard peer (eg 10.200.200.2/32)
    ConstraintDescription: Must be an IP inside the ServerIP range
    Type: String

  Peer6Name:
    Description: Friendly name of peer 6
    Default: Peer6
    Type: String

  Peer6PublicKey:
    Description: Public Key for peer 6
    Type: String
    Default: ""

  Peer6IP:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.200.200.6/32
    Description: IP and netmask of allowed WireGuard peer (eg 10.200.200.2/32)
    ConstraintDescription: Must be an IP inside the ServerIP range
    Type: String

Conditions:
  HasHostedZone: !Not [!Equals [!Ref HostedZoneName, ""]]
  Peer2Exists: !Not [!Equals [!Ref Peer2PublicKey, ""]]
  Peer3Exists: !Not [!Equals [!Ref Peer3PublicKey, ""]]
  Peer4Exists: !Not [!Equals [!Ref Peer4PublicKey, ""]]
  Peer5Exists: !Not [!Equals [!Ref Peer5PublicKey, ""]]
  Peer6Exists: !Not [!Equals [!Ref Peer6PublicKey, ""]]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CIDRBlock
      Tags:
        - Key: Name
          Value: WireGuard VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR
      Tags:
        - Key: Name
          Value: WireGuard Public Subnet

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  IPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: "vpc"

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security group for WireGuard Server
      SecurityGroupIngress:
        - IpProtocol: udp
          FromPort: !Ref ServerPort
          ToPort: !Ref ServerPort
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"

  VPNInstance:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Install a simple application
      AWS::CloudFormation::Init:
        # ToDo: Configure regular security updates
        # https://stackoverflow.com/a/46248515/1943898
        configSets:
          default:
            - install_cfn_hup
            - create_swap
            - config_ip_forwarding
            - install_unbound
            - install_wireguard
        install_cfn_hup:
          files:
            /etc/systemd/system/cfn-hup.service:
              content: |
                [Unit]
                Description=cfn-hup daemon

                [Service]
                ExecStart=/usr/local/bin/cfn-hup -v
                PIDFile=/var/run/cfn-hup.pid

                [Install]
                WantedBy=multi-user.target
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |+
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.VPNInstance.Metadata.AWS::CloudFormation::Init
                action=/usr/local/bin/cfn-init -v \
                    --stack ${AWS::StackName} \
                    --resource VPNInstance \
                    --region ${AWS::Region}
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - /etc/systemd/system/cfn-hup.service
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        create_swap:
          commands:
            0_enable_swap:
              command: |
                /usr/bin/fallocate -l 1G /var/spool/swap
                chmod 0600 /var/spool/swap
                mkswap /var/spool/swap
                swapon /var/spool/swap
              test: "! test -e /var/spool/swap"
            1_persist_on_reboot:
              command: |
                echo "/var/spool/swap swap swap defaults 0 0" >> /etc/fstab
              test: '! grep "swap" /etc/fstab'
        config_ip_forwarding:
          commands:
            edit_config_file:
              command: 'echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf'
              test: '! grep "net.ipv4.ip_forward" /etc/sysctl.conf'
            update_system:
              command: "sysctl -p"
        install_wireguard:
          packages:
            yum:
              gcc: []
              iptables-nft: []
              make: []
          sources:
            /usr/local/src/wireguard-tools: "https://github.com/WireGuard/wireguard-tools/zipball/master"
          files:
            /etc/wireguard/wg0.conf:
              content:
                Fn::Join:
                  - "\n"
                  - - Fn::Sub: |
                        [Interface]
                        Address = ${ServerIP}
                        # We don't want WG mangling this file, only CFN
                        SaveConfig = false
                        ListenPort = ${ServerPort}
                        PrivateKey = ${PrivateKey}

                        # Note - substitute eth0 in the following lines to match the Internet-facing interface
                        PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE
                        PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE

                        [Peer]
                        PublicKey = ${Peer1PublicKey}
                        PresharedKey = ${PreSharedKey}
                        AllowedIPs = ${Peer1IP}
                    - Fn::If:
                        - Peer2Exists
                        - Fn::Sub: |
                            [Peer]
                            PublicKey = ${Peer2PublicKey}
                            PresharedKey = ${PreSharedKey}
                            AllowedIPs = ${Peer2IP}
                        - ""
                    - Fn::If:
                        - Peer3Exists
                        - Fn::Sub: |
                            [Peer]
                            PublicKey = ${Peer3PublicKey}
                            PresharedKey = ${PreSharedKey}
                            AllowedIPs = ${Peer3IP}
                        - ""
                    - Fn::If:
                        - Peer4Exists
                        - Fn::Sub: |
                            [Peer]
                            PublicKey = ${Peer4PublicKey}
                            PresharedKey = ${PreSharedKey}
                            AllowedIPs = ${Peer4IP}
                        - ""
                    - Fn::If:
                        - Peer5Exists
                        - Fn::Sub: |
                            [Peer]
                            PublicKey = ${Peer5PublicKey}
                            PresharedKey = ${PreSharedKey}
                            AllowedIPs = ${Peer5IP}
                        - ""
                    - Fn::If:
                        - Peer6Exists
                        - Fn::Sub: |
                            [Peer]
                            PublicKey = ${Peer6PublicKey}
                            PresharedKey = ${PreSharedKey}
                            AllowedIPs = ${Peer6IP}
                        - ""
              mode: "000400"
              owner: root
              group: root
          commands:
            00_build_tools:
              command: make -C /usr/local/src/wireguard-tools/src -j$(nproc)
            10_install_tools:
              command: make -C /usr/local/src/wireguard-tools/src install
            15_update_nic:
              command: sed -i "s/eth0/$(ip route list | grep default | grep -E  'dev (\w+)' -o | awk '{print $2}')/" /etc/wireguard/wg0.conf
            20_enable_wireguard:
              command: "systemctl enable wg-quick@wg0"
            30_start_wireguard:
              command: "systemctl start wg-quick@wg0"
          services:
            sysvinit:
              wg-quick@wg0:
                sources:
                  - "/usr/local/src/wireguard-tools"
                files:
                  - "/etc/wireguard/wg0.conf"
                commands:
                  - "00_build_tools"
                  - "10_install_tools"
        install_unbound:
          packages:
            yum:
              unbound: []
          files:
            /var/lib/unbound/root.hints:
              source: "https://www.internic.net/domain/named.cache"
              mode: "000444"
              owner: unbound
              group: unbound
            /etc/unbound/unbound.conf:
              content:
                Fn::Sub: |
                  # See unbound.conf(5) man page.

                  # The server clause sets the main parameters.
                  server:
                    # verbosity number, 0 is least verbose. 1 is default.
                    verbosity: 1

                    # print statistics to the log (for every thread) every N seconds.
                    # Set to "" or 0 to disable. Default is disabled.
                    # Needs to be disabled for munin plugin
                    statistics-interval: 0

                    # enable cumulative statistics, without clearing them after printing.
                    # Needs to be disabled for munin plugin
                    statistics-cumulative: no

                    # enable extended statistics (query types, answer codes, status)
                    # printed from unbound-control. default off, because of speed.
                    # Needs to be enabled for munin plugin
                    extended-statistics: yes

                    # number of threads to create. 1 disables threading.
                    num-threads: 4

                    # specify the interfaces to answer queries from by ip-address.
                    # The default is to listen to localhost (127.0.0.1 and ::1).
                    # specify 0.0.0.0 and ::0 to bind to all available interfaces.
                    # specify every interface[@port] on a new 'interface:' labelled line.
                    # The listen interfaces are not changed on reload, only on restart.
                    interface: 0.0.0.0
                    # interface: ::0
                    # interface: 192.0.2.153
                    # interface: 192.0.2.154
                    # interface: 192.0.2.154@5003
                    # interface: 2001:DB8::5
                    #
                    # for dns over tls and raw dns over port 80
                    # interface: 0.0.0.0@443
                    # interface: ::0@443
                    # interface: 0.0.0.0@80
                    # interface: ::0@80

                    # enable this feature to copy the source address of queries to reply.
                    # Socket options are not supported on all platforms. experimental.
                    # interface-automatic: yes
                    #
                    # NOTE: Enable this option when specifying interface 0.0.0.0 or ::0
                    # NOTE: Disabled per Fedora policy not to listen to * on default install
                    # NOTE: If deploying on non-default port, eg 80/443, this needs to be disabled
                    interface-automatic: no

                    # use SO_REUSEPORT to distribute queries over threads.
                    so-reuseport: yes

                    # use IP_TRANSPARENT so the interface: addresses can be non-local
                    # and you can config non-existing IPs that are going to work later on
                    # (uses IP_BINDANY on FreeBSD).
                    ip-transparent: yes

                    # Maximum UDP response size (not applied to TCP response).
                    # Suggested values are 512 to 4096. Default is 4096. 65536 disables it.
                    # 3072 causes +dnssec any isc.org queries to need TC=1.
                    # Helps mitigating DDOS
                    max-udp-size: 3072

                    # the time to live (TTL) value cap for RRsets and messages in the
                    # cache. Items are not cached for longer. In seconds.
                    # cache-max-ttl: 86400
                    cache-max-ttl: 14400

                    # control which clients are allowed to make (recursive) queries
                    # to this server. Specify classless netblocks with /size and action.
                    # By default everything is refused, except for localhost.
                    # Choose deny (drop message), refuse (polite error reply),
                    # allow (recursive ok), allow_snoop (recursive and nonrecursive ok)
                    # deny_non_local (drop queries unless can be answered from local-data)
                    # refuse_non_local (like deny_non_local but polite error reply).
                    access-control: 0.0.0.0/0 refuse
                    access-control: 127.0.0.0/8 allow
                    # access-control: ::0/0 refuse
                    # access-control: ::1 allow
                    # access-control: ::ffff:127.0.0.1 allow
                    access-control: ${VPNSubnet} allow

                    # if given, a chroot(2) is done to the given directory.
                    # i.e. you can chroot to the working directory, for example,
                    # for extra security, but make sure all files are in that directory.
                    #
                    # If chroot is enabled, you should pass the configfile (from the
                    # commandline) as a full path from the original root. After the
                    # chroot has been performed the now defunct portion of the config
                    # file path is removed to be able to reread the config after a reload.
                    #
                    # All other file paths (working dir, logfile, roothints, and
                    # key files) can be specified in several ways:
                    # 	o as an absolute path relative to the new root.
                    # 	o as a relative path to the working directory.
                    # 	o as an absolute path relative to the original root.
                    # In the last case the path is adjusted to remove the unused portion.
                    #
                    # The pid file can be absolute and outside of the chroot, it is
                    # written just prior to performing the chroot and dropping permissions.
                    #
                    # Additionally, unbound may need to access /dev/random (for entropy).
                    # How to do this is specific to your OS.
                    #
                    # If you give "" no chroot is performed. The path must not end in a /.
                    # chroot: "/var/lib/unbound"
                    chroot: ""

                    # if given, user privileges are dropped (after binding port),
                    # and the given username is assumed. Default is user "unbound".
                    # If you give "" no privileges are dropped.
                    username: "unbound"

                    # the working directory. The relative files in this config are
                    # relative to this directory. If you give "" the working directory
                    # is not changed.
                    # If you give a server: directory: dir before include: file statements
                    # then those includes can be relative to the working directory.
                    directory: "/etc/unbound"

                    # print UTC timestamp in ascii to logfile, default is epoch in seconds.
                    log-time-ascii: yes

                    # the pid file. Can be an absolute path outside of chroot/work dir.
                    pidfile: "/var/run/unbound/unbound.pid"

                    # file to read root hints from.
                    # get one from https://www.internic.net/domain/named.cache
                    root-hints: "/var/lib/unbound/root.hints"

                    # enable to not answer id.server and hostname.bind queries.
                    # hide-identity: no
                    hide-identity: yes

                    # enable to not answer version.server and version.bind queries.
                    # hide-version: no
                    hide-version: yes

                    # Harden against out of zone rrsets, to avoid spoofing attempts.
                    harden-glue: yes

                    # Harden against receiving dnssec-stripped data. If you turn it
                    # off, failing to validate dnskey data for a trustanchor will
                    # trigger insecure mode for that zone (like without a trustanchor).
                    # Default on, which insists on dnssec data for trust-anchored zones.
                    harden-dnssec-stripped: yes

                    # Harden against queries that fall under dnssec-signed nxdomain names.
                    harden-below-nxdomain: yes

                    # Harden the referral path by performing additional queries for
                    # infrastructure data.  Validates the replies (if possible).
                    # Default off, because the lookups burden the server.  Experimental
                    # implementation of draft-wijngaards-dnsext-resolver-side-mitigation.
                    harden-referral-path: yes

                    # Enforce privacy of these addresses. Strips them away from answers.
                    # It may cause DNSSEC validation to additionally mark it as bogus.
                    # Protects against 'DNS Rebinding' (uses browser as network proxy).
                    # Only 'private-domain' and 'local-data' names are allowed to have
                    # these private addresses. No default.
                    # private-address: 10.0.0.0/8
                    # private-address: 172.16.0.0/12
                    # private-address: 192.168.0.0/16
                    # private-address: 169.254.0.0/16
                    # private-address: fd00::/8
                    # private-address: fe80::/10
                    # private-address: ::ffff:0:0/96
                    private-address: ${VPNSubnet}

                    # If nonzero, unwanted replies are not only reported in statistics,
                    # but also a running total is kept per thread. If it reaches the
                    # threshold, a warning is printed and a defensive action is taken,
                    # the cache is cleared to flush potential poison out of it.
                    # A suggested value is 10000000, the default is 0 (turned off).
                    unwanted-reply-threshold: 10000000

                    # if yes, perform prefetching of almost expired message cache entries.
                    prefetch: yes

                    # if yes, perform key lookups adjacent to normal lookups.
                    prefetch-key: yes

                    # if yes, Unbound rotates RRSet order in response.
                    rrset-roundrobin: yes

                    # if yes, Unbound doesn't insert authority/additional sections
                    # into response messages when those sections are not required.
                    minimal-responses: yes

                    # module configuration of the server. A string with identifiers
                    # separated by spaces. Syntax: "[dns64] [validator] iterator"
                    # module-config: "validator iterator"
                    module-config: "ipsecmod validator iterator"

                    # trust anchor signaling sends a RFC8145 key tag query after priming.
                    trust-anchor-signaling: yes

                    # File with trusted keys for validation. Specify more than one file
                    # with several entries, one file per entry. Like trust-anchor-file
                    # but has a different file format. Format is BIND-9 style format,
                    # the trusted-keys { name flag proto algo "key"; }; clauses are read.
                    # you need external update procedures to track changes in keys.
                    # trusted-keys-file: ""
                    #
                    trusted-keys-file: /etc/unbound/keys.d/*.key
                    auto-trust-anchor-file: "/var/lib/unbound/root.key"

                    # Should additional section of secure message also be kept clean of
                    # unsecure data. Useful to shield the users of this validator from
                    # potential bogus data in the additional section. All unsigned data
                    # in the additional section is removed from secure messages.
                    val-clean-additional: yes

                    # Turn permissive mode on to permit bogus messages. Thus, messages
                    # for which security checks failed will be returned to clients,
                    # instead of SERVFAIL. It still performs the security checks, which
                    # result in interesting log files and possibly the AD bit in
                    # replies if the message is found secure. The default is off.
                    # NOTE: TURNING THIS ON DISABLES ALL DNSSEC SECURITY
                    val-permissive-mode: no

                    # Have the validator log failed validations for your diagnosis.
                    # 0: off. 1: A line per failed user query. 2: With reason and bad IP.
                    val-log-level: 1

                    include: /etc/unbound/local.d/*.conf

                    # Specific options for ipsecmod.
                    #
                    # Enable or disable ipsecmod (it still needs to be defined in
                    # module-config above). Can be used when ipsecmod needs to be
                    # enabled/disabled via remote-control(below).
                    ipsecmod-enabled: no
                    #
                    # Path to executable external hook. It must be defined when ipsecmod is
                    # listed in module-config (above).
                    ipsecmod-hook: "/usr/libexec/ipsec/_unbound-hook"

                    # Python config section. To enable:
                    # o use --with-pythonmodule to configure before compiling.
                    # o list python in the module-config string (above) to enable.
                    # o and give a python-script to run.
                    python:
                      # Script file to load
                      # python-script: "/etc/unbound/ubmodule-tst.py"

                    # Remote control config section.
                    remote-control:
                      # Enable remote control with unbound-control(8) here.
                      # set up the keys and certificates with unbound-control-setup.
                      # Note: required for unbound-munin package
                    	control-enable: yes

                      # unbound server key file.
                    	server-key-file: "/etc/unbound/unbound_server.key"

                      # unbound server certificate file.
                    	server-cert-file: "/etc/unbound/unbound_server.pem"

                      # unbound-control key file.
                    	control-key-file: "/etc/unbound/unbound_control.key"

                      # unbound-control certificate file.
                    	control-cert-file: "/etc/unbound/unbound_control.pem"

                    # Stub and Forward zones
                    include: /etc/unbound/conf.d/*.conf
              mode: "000644"
              owner: root
              group: root
          commands:
            10_reconf_systemd_resolver:
              command: sed -i s/^#DNS=$/DNS=127.0.0.1/g /etc/systemd/resolved.conf
            20_reconf_systemd_resolver:
              command: sed -i s/^#DNSStubListener=yes$/DNSStubListener=no/g /etc/systemd/resolved.conf
            30_restart_systemd_resolver:
              command: "systemctl stop systemd-resolved"
            40_enable_unbound:
              command: "systemctl enable unbound"
            50_start_unbound:
              command: "systemctl start unbound"
          services:
            sysvinit:
              unbound:
                files:
                  - "/etc/unbound/unbound.conf"
                packages:
                  yum:
                    - unbound
    DependsOn: IPAddress
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: WireGuard VPN Instance
      UserData:
        # ToDo: migrate script to cloud-init
        # https://cloudinit.readthedocs.io/en/latest/topics/examples.html
        Fn::Base64: !Sub |+
          #!/bin/bash -xe
          PATH=/opt/aws/bin:/usr/local/bin:$PATH
          if ( ! which cfn-init ); then
            yum install -y python3-pip chkconfig
            pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          fi
          cfn-init -v \
            --stack ${AWS::StackName} \
            --resource VPNInstance \
            --region ${AWS::Region}
          cfn-signal -e $? \
            --stack ${AWS::StackName} \
            --resource VPNInstance \
            --region ${AWS::Region}

  IPAssociaton:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt IPAddress.AllocationId
      InstanceId: !Ref VPNInstance

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: HasHostedZone
    Properties:
      HostedZoneName: !Ref "HostedZoneName"
      Comment: Friendly DNS name for WireGuard server
      Name:
        !Join [
          "",
          ["wireguard", ., !Ref "AWS::Region", ., !Ref "HostedZoneName"],
        ]
      Type: A
      TTL: 900
      ResourceRecords:
        - !Ref IPAddress

Outputs:
  VPNServerDNSName:
    Description: WireGuard VPN Server DNS Name
    Value: !Sub ${DNSRecord}
  ServerIPandMask:
    Description: WireGuard VPN Server internal IP Address and network mask
    Value: !Sub ${ServerIP}
  ServerPort:
    Description: WireGuard VPN Server Port
    Value: !Sub ${ServerPort}
  Peer1Name:
    Description: Friendly name of peer 1
    Value: !Sub ${Peer1Name}
  Peer1PublicKey:
    Description: Public key of peer 1
    Value: !Sub ${Peer1PublicKey}
  Peer1IPandMask:
    Description: Internal IP and network mask of peer 1
    Value: !Sub ${Peer1IP}
  Peer2Name:
    Description: Friendly name of peer 2
    Value: !Sub ${Peer2Name}
  Peer2PublicKey:
    Description: Public key of peer 2
    Value: !Sub ${Peer2PublicKey}
  Peer2IPandMask:
    Description: Internal IP and network mask of peer 2
    Value: !Sub ${Peer2IP}
  Peer3Name:
    Description: Friendly name of peer 3
    Value: !Sub ${Peer3Name}
  Peer3PublicKey:
    Description: Public key of peer 3
    Value: !Sub ${Peer3PublicKey}
  Peer3IPandMask:
    Description: Internal IP and network mask of peer 3
    Value: !Sub ${Peer3IP}
  Peer4Name:
    Description: Friendly name of peer 4
    Value: !Sub ${Peer4Name}
  Peer4PublicKey:
    Description: Public key of peer 4
    Value: !Sub ${Peer4PublicKey}
  Peer4IPandMask:
    Description: Internal IP and network mask of peer 4
    Value: !Sub ${Peer4IP}
  Peer5Name:
    Description: Friendly name of peer 5
    Value: !Sub ${Peer5Name}
  Peer5PublicKey:
    Description: Public key of peer 5
    Value: !Sub ${Peer5PublicKey}
  Peer5IPandMask:
    Description: Internal IP and network mask of peer 5
    Value: !Sub ${Peer5IP}
  Peer6Name:
    Description: Friendly name of peer 6
    Value: !Sub ${Peer6Name}
  Peer6PublicKey:
    Description: Public key of peer 6
    Value: !Sub ${Peer6PublicKey}
  Peer6IPandMask:
    Description: Internal IP and network mask of peer 6
    Value: !Sub ${Peer6IP}
